services:
  postgres:
    image: timescale/timescaledb-ha:pg16
    container_name: ht-postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: user
      POSTGRES_PASSWORD: secret
    ports:
      - "5445:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - content
    restart: unless-stopped

  localstack:
    image: localstack/localstack:4.7
    container_name: ht-localstack
    environment:
      - SERVICES=sqs
      - DEBUG=0
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=access-test
      - AWS_SECRET_ACCESS_KEY=secret-test
      - SKIP_INFRA_DOWNLOADS=1
      - DISABLE_EVENTS=1
    ports:
      - "4566:4566"
    volumes:
      - localstack_data:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -s http://localhost:4566/_localstack/health | grep -q '\"sqs\": \"available\"' || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - content

  sqs-setup:
    image: amazon/aws-cli:2.28.6
    container_name: ht-sqs
    environment:
      - AWS_ACCESS_KEY_ID=access-test
      - AWS_SECRET_ACCESS_KEY=secret-test
      - AWS_DEFAULT_REGION=us-east-1
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        sleep 10
        aws --endpoint-url=http://localstack:4566 sqs create-queue --queue-name ht-queue
        echo "SQS queue 'ht-queue' created successfully"
    depends_on:
      localstack:
        condition: service_healthy
    networks:
      - content

  app:
    build: .
    container_name: ht-app
    ports:
      - "8080:8080"
    environment:
      - ENV=docker
    depends_on:
      postgres:
        condition: service_healthy
      localstack:
        condition: service_healthy
      sqs-setup:
        condition: service_completed_successfully
    restart: unless-stopped
    volumes:
      - ./cmd/configs:/app/cmd/configs:ro
      - ./data/postgres/migrations:/app/data/postgres/migrations:ro
    networks:
      - content

volumes:
  postgres_data:
  localstack_data:

networks:
  content:
    driver: bridge